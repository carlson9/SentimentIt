{
    "contents" : "#' Fit STAN Hierarchical Model\n#'\n#' Fit STAN hierarchical model\n#'\n#'\n#' @param data a dataset\n#'\n#' @return STAN output\n#'\n#' @author David Carlson\n#'\n#' @rdname fit_stan_squre\n#'\n#' @export\nfit_stan_square <- function(data){\n  library(rstan)\n  rstan_options(auto_write = TRUE)\n  options(mc.cores = parallel::detectCores())\n\n  y <- data$result[seq(1,dim(data)[1],by=2)]\n  #z <- y\n  #z[z==0] <- -1\n  data$document_id_old <- data$document_id\n  data$document_id <- as.numeric(as.factor(data$document_id))\n  #data$country_id_old <- data$countries\n  #data$country_id <- as.numeric(data$country_id_old)\n  g <- data$document_id[seq(1,dim(data)[1],by=2)]\n  h <- data$document_id[seq(1,dim(data)[1],by=2)+1]\n  countries <- as.numeric(as.factor(data$countries))\n  j <- as.numeric(data$worker_id[seq(1,dim(data)[1],by=2)])\n  #unique(data$worker_id[seq(1,dim(data)[1],by=2)])\n  M <- length(unique(c(g,h)))\n  N <- length(y)\n  P <- length(unique(j))\n  D <- length(unique(c(q,k)))\n  ### need to recode ids ###\n  #hold.ids <- sort(unique(g))\n  #hold.ids.real <- g\n  #length(as.factor(g))\n  #g <- as.numeric(as.factor(g))\n  #h <- as.numeric(as.factor(h))\n  #k <- as.numeric(as.factor(k))\n  #q <- as.numeric(as.factor(q))\n\n  fit <- stan(file=\"~/SentimentIt/SentimentIt/model_code_hier.stan\", data=c(\"y\", \"g\", \"h\", \"N\", \"M\", \"P\", \"j\", \"D\", \"k\"),\n              chains=3, iter=2500, seed=1234, control=list(max_treedepth=50))\n  return(fit)\n}\n",
    "created" : 1459926499917.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2949170481",
    "id" : "20BBAD6E",
    "lastKnownWriteTime" : 1459927932,
    "path" : "~/SentimentIt/SentimentIt/R/fit_stan_hier.R",
    "project_path" : "R/fit_stan_hier.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}