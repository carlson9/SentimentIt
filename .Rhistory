status <- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
hold <- as.data.frame(read(text = status), stringsAsFactors = FALSE)
return(hold)
}
batch_status(2)
batch_status <- function(batch_id){
require(jsonlite)
status <- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
hold <- as.data.frame(read.table(text = status), stringsAsFactors = FALSE)
return(hold)
}
batch_status(2)
batch_status <- function(batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
status <- read.table(text = x)
}
batch_status(204)
batch_status <- function(batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
status <- read.table(text = myurl)
}
batch_status(204)
batch_status <- function(batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
status <- read.table(file = myurl)
}
batch_status(204)
batch_status <- function(batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
#status <- read.table(file = myurl)
return(myurl)
}
batch_status(204)
?jsonlite
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
out <- fromJSON(rawToChar(as.raw(myurl$content)))
return(out)
}
batch_status(204)
?jsonlite
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
out <- fromJSON(rawToChar(as.raw(myurl$content)))
return(myurl)
}
batch_status(204)
?jsonlite
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
out <- fromJSON(rawToChar(as.raw(myurl$content)))
return(out)
}
batch_status(204)
x <-batch_status(204)
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
colnames(status) <- c("id", "comparisons" )
return(status)
}
x <-batch_status(204)
x
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
colnames(status) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
return(status)
}
x <-batch_status(204)
x
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
return(output)
}
x <-batch_status(204:205)
x
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',i,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
return(output)
}
x <-batch_status(204:205)
x
toString(204:205)
toString(204:207)
strsplit(x=toString(204:207),split=",")
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',i,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
rownames(output) <- strsplit(x=toString(batch_id),split=",")
return(output)
}
x <-batch_status(204:205)
x
paste("batch_id:",strsplit(x=toString(204:207),split=","))
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',i,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
#rownames(output) <- strsplit(x=toString(batch_id),split=",")
return(output)
}
x <-batch_status(204:205)
x
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',i,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
return(output)
}
x <-batch_status(204:205)
x
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
?GET
setwd("/Users/davidflast/Documents/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batch_status
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
setwd("/Users/davidflast/Documents/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batchStatus
setwd("/Users/davidflast/Documents/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batchStatus
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
setwd("/Users/davidflast/Documents")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batchStatus
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batchStatus
?readInData
?PUT
repostExpired <- function(batch_id){
require(jsonlite)
x <-PUT('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/repost_expired.json')
return(x)
}
repost_expired(2)
repostExpired <- function(batch_id){
require(jsonlite)
x <-PUT('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/repost_expired.json')
return(x)
}
repost_expired(2)
repostExpired(2)
repostExpired <- function(batch_id){
require(jsonlite)
PUT('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/repost_expired.json')
x <- GET('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/repost_expired.json')
return(x)
}
repostExpired(2)
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
# Davidflasterstein path
setwd("/Users/davidflast/Documents")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
test_dir("/tests")
test_dir("~tests")
test_dir("~/tests")
test_dir("~/tests/testthat")
test_dir("/tests/testthat")
test_dir(path="tests")
test_dir(path="tests/testthat")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?in
?included
x <- 1:10
y <- 9:20
x %in% y
any(x %in% y)
?any
Sys.time()
as.numeric(format(Sys.time(), "%H"))
createHITS <- function(ids=NULL, HITsetting=NULL, batch_id){
require(httr)
require(jsonlite)
if(!is.numeric(ids) | !is.numeric(HITsetting) | !is.numeric(batch_id)){
stop("All arguments need to be numeric.")
}
if(is.null(ids)){
args <- paste('batch_id=', batch_id,"" ,sep='')
}else{
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
myget <- GET(paste('http://sentimentit.herokuapp.com/api/comparisons/create_hits?',
args, sep=''))
mytry <- try(out<-fromJSON(rawToChar(as.raw(myget$content))))
if(class(mytry) == "try-error"){
out <- 'error'
}
return(out)
}
batches <- function(hit_setting_id){
if(!is.numeric(hit_setting_id) | length(hit_setting_id != 1)){
stop("hit_setting_id needs to be a numeric of length 1")
}
args = paste("hit_setting_id=", hit_setting_id, sep="")
myget <- POST(paste('http://sentimentit.herokuapp.com/api/batches.json?',
args, sep=''))
}
batches(2)
batches(2)
batches <- function(hit_setting_id){
if(!is.numeric(hit_setting_id)){
stop("hit_setting_id needs to be a numeric")
}
args = paste("hit_setting_id=", hit_setting_id, sep="")
myget <- POST(paste('http://sentimentit.herokuapp.com/api/batches.json?',
args, sep=''))
}
batches(2)
batches <- function(hit_setting_id){
require(jsonlite)
require(httr)
if(!is.numeric(hit_setting_id)){
stop("hit_setting_id needs to be a numeric")
}
args = paste("hit_setting_id=", hit_setting_id, sep="")
myget <- POST(paste('http://sentimentit.herokuapp.com/api/batches.json?',
args, sep=''))
}
batches(2)
args <- paste("hit_setting_id=", hit_setting_id, sep="")
args <- paste("hit_setting_id=", 2, sep="")
myget <- POST(paste('http://sentimentit.herokuapp.com/api/batches.json?',
args, sep=''))
myget$content
fromraw(myget$content)
fromJSON(rawToChar(as.raw(myget$content)
)
)
fromJSON(rawToChar(as.raw(myget$content)))$id
batches <- function(hit_setting_id){
require(jsonlite)
require(httr)
if(!is.numeric(hit_setting_id)){
stop("hit_setting_id needs to be a numeric")
}
args <- paste("hit_setting_id=", hit_setting_id, sep="")
myget <- POST(paste('http://sentimentit.herokuapp.com/api/batches.json?',
args, sep=''))
return(fromJSON(rawToChar(as.raw(myget$content)))$id)
}
batches(2)
current.code <- as.package("sentimentIt")
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
setwd("/Users/davidflast/Documents")
current.code <- as.package("sentimentIt")
load_all(current.code)
current.code <- as.package("sentimentIt")
load_all(current.code)
check(current.code)
current.code <- as.package("sentimentIt")
load_all(current.code)
check(current.code)
createBatches <- function(hit_setting_id, num_batches=1){
if(!is.numeric(hit_setting_id)){
stop("hit_setting_id needs to be a numeric")
}
for(i in 1:num_times_repeat){
args <- paste("hit_setting_id=", hit_setting_id, sep="")
myget <- POST(paste('http://sentimentit.herokuapp.com/api/batches.json?',
args, sep=''))
batch_ids[i] <- fromJSON(rawToChar(as.raw(myget$content)))$id
}
return(batch_ids)
}
createBatches(2,2)
createBatches <- function(hit_setting_id, num_batches=1){
if(!is.numeric(hit_setting_id)){
stop("hit_setting_id needs to be a numeric")
}
for(i in 1:num_batches){
args <- paste("hit_setting_id=", hit_setting_id, sep="")
myget <- POST(paste('http://sentimentit.herokuapp.com/api/batches.json?',
args, sep=''))
batch_ids[i] <- fromJSON(rawToChar(as.raw(myget$content)))$id
}
return(batch_ids)
}
createBatches(2,2)
createBatches <- function(hit_setting_id, num_batches=1){
if(!is.numeric(hit_setting_id)){
stop("hit_setting_id needs to be a numeric")
}
batch_ids <- vector()
for(i in 1:num_batches){
args <- paste("hit_setting_id=", hit_setting_id, sep="")
myget <- POST(paste('http://sentimentit.herokuapp.com/api/batches.json?',
args, sep=''))
batch_ids[i] <- fromJSON(rawToChar(as.raw(myget$content)))$id
}
return(batch_ids)
}
createBatches(2,2)
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
setwd("/Users/davidflast/Documents")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
setwd("/Users/davidflast/Documents")
x <- read.csv("/Users/davidflast/Documents/sentimentIt/reviews.csv")
View(x)
?use_data
reviews <- read.csv("/Users/davidflast/Documents/sentimentIt/reviews.csv")
use_data(reviews,sentimentIt)
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
setwd("/Users/davidflast/Documents")
use_data(reviews,sentimentIt)
use_data(reviews,"sentimentIt")
use_data(reviews)
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
setwd("/Users/davidflast/Documents")
reviews <- read.csv("/Users/davidflast/Documents/sentimentIt/reviews.csv")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
use_data(reviews, "sentimentIt",internal = TRUE)
use_data(reviews, "current.code",internal = TRUE)
use_data(reviews)
use_data(reviews)
setwd("/Users/davidflast/Documents")
use_data(reviews)
load("~/Documents/SentimentIt/data/readInDataExample.rda")
?save
save(reviews)
save(reviews,file="reviews.rda")
load("~/Documents/reviews.rda")
rm(list=ls())
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
reviews
load("~/Documents/SentimentIt/data/reviews.rda")
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
# Davidflasterstein path
setwd("/Users/davidflast/Documents")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
createBatches(2)
current.code::createBatches(2)
sentimentIt::createBatches(2)
createBatches <- function(hit_setting_id, num_batches=1){
if(!is.numeric(hit_setting_id)){
stop("hit_setting_id needs to be a numeric")
}
batch_ids <- vector()
for(i in 1:num_batches){
args <- paste("hit_setting_id=", hit_setting_id, sep="")
myget <- POST(paste('http://sentimentit.herokuapp.com/api/batches.json?',
args, sep=''))
batch_ids[i] <- fromJSON(rawToChar(as.raw(myget$content)))$id
}
return(batch_ids)
}
createBatches(2)
createBatches(2,2)
load("~/Documents/SentimentIt/data/reviews.rda")
View(reviews)
floor(.15)
ceiling(.15)
ceiling(1.15)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
setwd("/Users/davidflast/Documents")
## This can be run many times as the code is updates
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
## This can be run many times as the code is updates
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
## This can be run many times as the code is updates
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
## This can be run many times as the code is updates
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
1005*10
ceiling(1005*10/1000)
