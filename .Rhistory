model {
for(p in 1:P){
b[p] ~ normal(0,1);
}
for(d in 1:D){
t[d] ~ normal(0,1);
sigmac[d] ~ normal(0,.5);
}
for(m in 1:M){
a[m] ~ normal(t[k[m]],sigmac[k[m]]);
}
for(n in 1:N) {
y[n] ~ bernoulli(inv_logit(b[j[n]]*(a[g[n]]-a[h[n]])));
}
}'
fit_hier <- stan(model_code = model_code,
data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=chains, iter=iter, seed=seed, control=list(max_treedepth=50))
rhats = rstan::summary(fit_hier)$summary[,'Rhat']
if(any(rhats>1.1)) warning('The largest Rhat is ', max(rhats), ', consider increasing the number of iterations.')
alphas = rstan::summary(fit_hier)$summary[grep('a\\[',rownames(rstan::summary(fit_hier)$summary)),]
ids = unique(data1$document_id_old[order(data1$document_id_old)])
alphaPosts = cbind(ids, alphas)
ts = rstan::summary(fit_hier)$summary[grep('t\\[',rownames(rstan::summary(fit_hier)$summary)),]
hier_ids = unique(hierarchy_data[order(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))), hierarchy_var])
tPosts = cbind(hier_ids, ts)
return(list('fit' = fit_hier, 'aplhaPosts' = alphaPosts, 'tPosts' = tPosts))
}
fit <- fitStanHier(data = humanRightsOutput, #can alternatively be batch IDs
hierarchy_data = humanRightsDocs,
hierarchy_var = 1) # can alternatively be a column name
fitStanHier <- function(email=NULL, password=NULL, data, hierarchy_data, hierarchy_var,
chains=3, iter=2500, seed=1234, n.cores=3){
requireNamespace('rstan') #bug in rstan - needs explicit call
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = n.cores)
requireNamespace('Rcpp')
if(is.vector(data)){
data <- readInData(email, password, data)
}
data1 <- data
if(dim(data1)[2] != 7){
stop("data dimension is incorrect")
}
y <- data1$result[seq(1, dim(data1)[1], by=2)]
data1$document_id_old <- data1$document_id
data1$document_id <- as.numeric(as.factor(data1$document_id))
g <- data1$document_id[seq(1, dim(data1)[1], by=2)]
h <- data1$document_id[seq(1, dim(data1)[1], by=2) + 1]
j <- as.numeric(as.factor(data1$worker_id[seq(1, dim(data1)[1], by=2)]))
k <- as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))
M <- length(unique(c(g, h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(k))
g <- as.numeric(as.factor(g))
h <- as.numeric(as.factor(h))
k <- as.numeric(as.factor(k))
model_code <- '
data {
int N; // number of comparisons
int M; // number of paragraphs
int D; // number of documents (countries)
int P; //Number of coders
int y[N]; // outcome
int g[N];    // id  map first item in comparison
int h[N];    // id map of second item in comparison
int j[N]; // id map for workers
int k[M]; // id map for documents (countries) relating to documents
}
parameters {
real a[M]; // paragraphs
real t[D]; // documents (countries)
real<lower=0> b[P];
real<lower=0> sigmac[D];
}
model {
for(p in 1:P){
b[p] ~ normal(0,1);
}
for(d in 1:D){
t[d] ~ normal(0,1);
sigmac[d] ~ normal(0,.5);
}
for(m in 1:M){
a[m] ~ normal(t[k[m]],sigmac[k[m]]);
}
for(n in 1:N) {
y[n] ~ bernoulli(inv_logit(b[j[n]]*(a[g[n]]-a[h[n]])));
}
}'
fit_hier <- rstan::stan(model_code = model_code,
data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=chains, iter=iter, seed=seed, control=list(max_treedepth=50))
rhats = rstan::summary(fit_hier)$summary[,'Rhat']
if(any(rhats>1.1)) warning('The largest Rhat is ', max(rhats), ', consider increasing the number of iterations.')
alphas = rstan::summary(fit_hier)$summary[grep('a\\[',rownames(rstan::summary(fit_hier)$summary)),]
ids = unique(data1$document_id_old[order(data1$document_id_old)])
alphaPosts = cbind(ids, alphas)
ts = rstan::summary(fit_hier)$summary[grep('t\\[',rownames(rstan::summary(fit_hier)$summary)),]
hier_ids = unique(hierarchy_data[order(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))), hierarchy_var])
tPosts = cbind(hier_ids, ts)
return(list('fit' = fit_hier, 'aplhaPosts' = alphaPosts, 'tPosts' = tPosts))
}
fit <- fitStanHier(data = humanRightsOutput, #can alternatively be batch IDs
hierarchy_data = humanRightsDocs,
hierarchy_var = 1) # can alternatively be a column name
View(humanRightsDocs)
View(humanRightsOutput)
View(humanRightsDocs)
fit
fit$fit
fit_hier = fit$fit
rstan::summary(fit_hier)$summary[,'Rhat']
unique(hierarchy_data[order(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))), hierarchy_var])
hierarchy_data = humanRightsDocs
hierarchy_var = 1
unique(hierarchy_data[order(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))), hierarchy_var])
hier_ids = unique(hierarchy_data[order(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))), hierarchy_var])
cbind(hier_ids, ts)
ts = rstan::summary(fit_hier)$summary[grep('t\\[',rownames(rstan::summary(fit_hier)$summary)),]
cbind(hier_ids, ts)
head(fit$aplhaPosts)
tail(fit$aplhaPosts)
cbind(hier_ids, ts)
hier_ids
?cbind
cbind(hier_ids, ts, stringsAsFactors=FALSE)
data.frame(hier_ids, ts, stringsAsFactors=FALSE)
tPosts = data.frame(hier_ids, ts, stringsAsFactors=FALSE)
fit$aplhaPosts
tPosts
unique(hierarchy_data[order(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))), hierarchy_var])
unique(hierarchy_data[(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))), hierarchy_var])
hier_ids = unique(hierarchy_data[(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))), hierarchy_var])
tPosts = data.frame(hier_ids, ts, stringsAsFactors=FALSE)
(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var]))))
unique(hierarchy_data[,hierarchy_var])
unique(hierarchy_data[order(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))), hierarchy_var])
order(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var]))))
as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))
unique(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var]))))
hier_ids = unique(hierarchy_data[,hierarchy_var])[unique(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var]))))]
hier_ids
tPosts = data.frame(hier_ids, ts, stringsAsFactors=FALSE)
tPosts
unique(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var]))))
hier_ids[unique(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var]))))] = unique(hierarchy_data[,hierarchy_var])
tPosts = data.frame(hier_ids, ts, stringsAsFactors=FALSE)
tPosts
unique(hierarchy_data[,hierarchy_var])
k
k <- as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))
k
unique(hierarchy_data[,hierarchy_var])
unique(as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var]))))
head(tPosts,7)
tPosts
k
unique(k)
unique(hierarchy_data[,hierarchy_var])
fitStanHier <- function(email=NULL, password=NULL, data, hierarchy_data, hierarchy_var,
chains=3, iter=2500, seed=1234, n.cores=3){
requireNamespace('rstan') #bug in rstan - needs explicit call
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = n.cores)
requireNamespace('Rcpp')
if(is.vector(data)){
data <- readInData(email, password, data)
}
data1 <- data
if(dim(data1)[2] != 7){
stop("data dimension is incorrect")
}
y <- data1$result[seq(1, dim(data1)[1], by=2)]
data1$document_id_old <- data1$document_id
data1$document_id <- as.numeric(as.factor(data1$document_id))
g <- data1$document_id[seq(1, dim(data1)[1], by=2)]
h <- data1$document_id[seq(1, dim(data1)[1], by=2) + 1]
j <- as.numeric(as.factor(data1$worker_id[seq(1, dim(data1)[1], by=2)]))
k <- as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))
M <- length(unique(c(g, h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(k))
g <- as.numeric(as.factor(g))
h <- as.numeric(as.factor(h))
k <- as.numeric(as.factor(k))
model_code <- '
data {
int N; // number of comparisons
int M; // number of paragraphs
int D; // number of documents (countries)
int P; //Number of coders
int y[N]; // outcome
int g[N];    // id  map first item in comparison
int h[N];    // id map of second item in comparison
int j[N]; // id map for workers
int k[M]; // id map for documents (countries) relating to documents
}
parameters {
real a[M]; // paragraphs
real t[D]; // documents (countries)
real<lower=0> b[P];
real<lower=0> sigmac[D];
}
model {
for(p in 1:P){
b[p] ~ normal(0,1);
}
for(d in 1:D){
t[d] ~ normal(0,1);
sigmac[d] ~ normal(0,.5);
}
for(m in 1:M){
a[m] ~ normal(t[k[m]],sigmac[k[m]]);
}
for(n in 1:N) {
y[n] ~ bernoulli(inv_logit(b[j[n]]*(a[g[n]]-a[h[n]])));
}
}'
fit_hier <- rstan::stan(model_code = model_code,
data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=chains, iter=iter, seed=seed, control=list(max_treedepth=50))
rhats = rstan::summary(fit_hier)$summary[,'Rhat']
if(any(rhats>1.1)) warning('The largest Rhat is ', max(rhats), ', consider increasing the number of iterations.')
alphas = rstan::summary(fit_hier)$summary[grep('a\\[',rownames(rstan::summary(fit_hier)$summary)),]
ids = unique(data1$document_id_old[order(data1$document_id_old)])
alphaPosts = cbind(ids, alphas)
ts = rstan::summary(fit_hier)$summary[grep('t\\[',rownames(rstan::summary(fit_hier)$summary)),]
hier_ids = vector()
hier_ids[unique(k)] = unique(hierarchy_data[,hierarchy_var])
tPosts = data.frame(hier_ids, ts, stringsAsFactors=FALSE)
return(list('fit' = fit_hier, 'alphaPosts' = alphaPosts, 'tPosts' = tPosts))
}
fit <- fitStanHier(data = humanRightsOutput,
hierarchy_data = humanRightsDocs,
hierarchy_var = 1) # can alternatively be a column name
fit <- fitStanHier(data = humanRightsOutput,
hierarchy_data = humanRightsDocs,
hierarchy_var = 1, iter=7500) # can alternatively be a column name
hierarchy_data = hierarchy[!duplicated(hierarchy_data$ids),]
hierarchy_data = hierarchy_data[!duplicated(hierarchy_data$ids),]
chains=2
iter=1000
seed=122
y <- data1$result[seq(1, dim(data1)[1], by=2)]
data1$document_id_old <- data1$document_id
data1$document_id <- as.numeric(as.factor(data1$document_id))
g <- data1$document_id[seq(1, dim(data1)[1], by=2)]
h <- data1$document_id[seq(1, dim(data1)[1], by=2) + 1]
j <- as.numeric(as.factor(data1$worker_id[seq(1, dim(data1)[1], by=2)]))
k <- as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))
M <- length(unique(c(g, h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(k))
g <- as.numeric(as.factor(g))
h <- as.numeric(as.factor(h))
k <- as.numeric(as.factor(k))
model_code <- '
data {
int N; // number of comparisons
int M; // number of paragraphs
int D; // number of documents (countries)
int P; //Number of coders
int y[N]; // outcome
int g[N];    // id  map first item in comparison
int h[N];    // id map of second item in comparison
int j[N]; // id map for workers
int k[M]; // id map for documents (countries) relating to documents
}
parameters {
real a[M]; // paragraphs
real t[D]; // documents (countries)
real<lower=0> b[P];
real<lower=0> sigmac[D];
}
model {
for(p in 1:P){
b[p] ~ normal(0,1);
}
for(d in 1:D){
t[d] ~ normal(0,1);
sigmac[d] ~ normal(0,.5);
}
for(m in 1:M){
a[m] ~ normal(t[k[m]],sigmac[k[m]]);
}
for(n in 1:N) {
y[n] ~ bernoulli(inv_logit(b[j[n]]*(a[g[n]]-a[h[n]])));
}
}'
fit_hier <- rstan::stan(model_code = model_code,
data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=chains, iter=iter, seed=seed, control=list(max_treedepth=50))
fitStanHier <- function(email=NULL, password=NULL, data, hierarchy_data, hierarchy_var,
chains=3, iter=2500, seed=1234, n.cores=3){
requireNamespace('rstan') #bug in rstan - needs explicit call
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = n.cores)
requireNamespace('Rcpp')
if(is.vector(data)){
data <- readInData(email, password, data)
}
data1 <- data
if(dim(data1)[2] != 7){
stop("data dimension is incorrect")
}
hierarchy_data = hierarchy_data[!duplicated(hierarchy_data$ids),]
y <- data1$result[seq(1, dim(data1)[1], by=2)]
data1$document_id_old <- data1$document_id
data1$document_id <- as.numeric(as.factor(data1$document_id))
g <- data1$document_id[seq(1, dim(data1)[1], by=2)]
h <- data1$document_id[seq(1, dim(data1)[1], by=2) + 1]
j <- as.numeric(as.factor(data1$worker_id[seq(1, dim(data1)[1], by=2)]))
k <- as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))
M <- length(unique(c(g, h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(k))
g <- as.numeric(as.factor(g))
h <- as.numeric(as.factor(h))
k <- as.numeric(as.factor(k))
model_code <- '
data {
int N; // number of comparisons
int M; // number of paragraphs
int D; // number of documents (countries)
int P; //Number of coders
int y[N]; // outcome
int g[N];    // id  map first item in comparison
int h[N];    // id map of second item in comparison
int j[N]; // id map for workers
int k[M]; // id map for documents (countries) relating to documents
}
parameters {
real a[M]; // paragraphs
real t[D]; // documents (countries)
real<lower=0> b[P];
real<lower=0> sigmac[D];
}
model {
for(p in 1:P){
b[p] ~ normal(0,1);
}
for(d in 1:D){
t[d] ~ normal(0,1);
sigmac[d] ~ normal(0,.5);
}
for(m in 1:M){
a[m] ~ normal(t[k[m]],sigmac[k[m]]);
}
for(n in 1:N) {
y[n] ~ bernoulli(inv_logit(b[j[n]]*(a[g[n]]-a[h[n]])));
}
}'
fit_hier <- rstan::stan(model_code = model_code,
data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=chains, iter=iter, seed=seed, control=list(max_treedepth=50))
rhats = rstan::summary(fit_hier)$summary[,'Rhat']
if(any(rhats>1.1)) warning('The largest Rhat is ', max(rhats), ', consider increasing the number of iterations.')
alphas = rstan::summary(fit_hier)$summary[grep('a\\[',rownames(rstan::summary(fit_hier)$summary)),]
ids = unique(data1$document_id_old[order(data1$document_id_old)])
alphaPosts = cbind(ids, alphas)
ts = rstan::summary(fit_hier)$summary[grep('t\\[',rownames(rstan::summary(fit_hier)$summary)),]
hier_ids = vector()
hier_ids[unique(k)] = unique(hierarchy_data[,hierarchy_var])
tPosts = data.frame(hier_ids, ts, stringsAsFactors=FALSE)
return(list('fit' = fit_hier, 'alphaPosts' = alphaPosts, 'tPosts' = tPosts))
}
it <- fitStanHier(data = humanRightsOutput,
)
fit <- fitStanHier(data = humanRightsOutput, #can alternatively be batch IDs
hierarchy_data = humanRightsDocs,
hierarchy_var = 1, iter=7500) # can alternatively be a column name
View(humanRightsOutput)
data = humanRightsOutput
hierarchy_data = humanRightsDocs
iter=7500
hierarchy_var = 1
requireNamespace('rstan') #bug in rstan - needs explicit call
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = n.cores)
options(mc.cores = 2)
requireNamespace('Rcpp')
data1 <- data
if(dim(data1)[2] != 7){
stop("data dimension is incorrect")
}
hierarchy_data = hierarchy_data[!duplicated(hierarchy_data$ids),]
y <- data1$result[seq(1, dim(data1)[1], by=2)]
data1$document_id_old <- data1$document_id
data1$document_id <- as.numeric(as.factor(data1$document_id))
g <- data1$document_id[seq(1, dim(data1)[1], by=2)]
h <- data1$document_id[seq(1, dim(data1)[1], by=2) + 1]
j <- as.numeric(as.factor(data1$worker_id[seq(1, dim(data1)[1], by=2)]))
k <- as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))
M <- length(unique(c(g, h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(k))
g <- as.numeric(as.factor(g))
h <- as.numeric(as.factor(h))
k <- as.numeric(as.factor(k))
hierarchy_data = humanRightsDocs
duplicated(hierarchy_data$ids)
load('SentimentIt/sentimentIt/data/humanRightsOutput.rda')
head(output)
humanRightsOutput=output
save(humanRightsOutput,file='SentimentIt/sentimentIt/data/humanRightsOutput.rda')
load('SentimentIt/sentimentIt/data/humanRightsOutput.rda')
data = humanRightsOutput
hierarchy_data = humanRightsDocs
hierarchy_var = 1
requireNamespace('rstan') #bug in rstan - needs explicit call
rstan::rstan_options(auto_write = TRUE)
options(mc.cores = n.cores)
requireNamespace('Rcpp')
if(is.vector(data)){
data <- readInData(email, password, data)
}
data1 <- data
if(dim(data1)[2] != 7){
stop("data dimension is incorrect")
}
hierarchy_data = hierarchy_data[!duplicated(hierarchy_data$ids),]
y <- data1$result[seq(1, dim(data1)[1], by=2)]
data1$document_id_old <- data1$document_id
data1$document_id <- as.numeric(as.factor(data1$document_id))
g <- data1$document_id[seq(1, dim(data1)[1], by=2)]
h <- data1$document_id[seq(1, dim(data1)[1], by=2) + 1]
j <- as.numeric(as.factor(data1$worker_id[seq(1, dim(data1)[1], by=2)]))
k <- as.numeric(as.factor(as.character(hierarchy_data[,hierarchy_var])))
M <- length(unique(c(g, h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(k))
g <- as.numeric(as.factor(g))
h <- as.numeric(as.factor(h))
k <- as.numeric(as.factor(k))
model_code <- '
data {
int N; // number of comparisons
int M; // number of paragraphs
int D; // number of documents (countries)
int P; //Number of coders
int y[N]; // outcome
int g[N];    // id  map first item in comparison
int h[N];    // id map of second item in comparison
int j[N]; // id map for workers
int k[M]; // id map for documents (countries) relating to documents
}
parameters {
real a[M]; // paragraphs
real t[D]; // documents (countries)
real<lower=0> b[P];
real<lower=0> sigmac[D];
}
model {
for(p in 1:P){
b[p] ~ normal(0,1);
}
for(d in 1:D){
t[d] ~ normal(0,1);
sigmac[d] ~ normal(0,.5);
}
for(m in 1:M){
a[m] ~ normal(t[k[m]],sigmac[k[m]]);
}
for(n in 1:N) {
y[n] ~ bernoulli(inv_logit(b[j[n]]*(a[g[n]]-a[h[n]])));
}
}'
fit_hier <- rstan::stan(model_code = model_code,
data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=chains, iter=iter, seed=seed, control=list(max_treedepth=50))
rhats = rstan::summary(fit_hier)$summary[,'Rhat']
max(rhats)
alphas = rstan::summary(fit_hier)$summary[grep('a\\[',rownames(rstan::summary(fit_hier)$summary)),]
ids = unique(data1$document_id_old[order(data1$document_id_old)])
alphaPosts = cbind(ids, alphas)
ts = rstan::summary(fit_hier)$summary[grep('t\\[',rownames(rstan::summary(fit_hier)$summary)),]
hier_ids = vector()
hier_ids[unique(k)] = unique(hierarchy_data[,hierarchy_var])
tPosts = data.frame(hier_ids, ts, stringsAsFactors=FALSE)
tPosts
hier_ids
unique(hierarchy_data[,hierarchy_var])
hier_ids = character()
hier_ids[unique(k)] = unique(hierarchy_data[,hierarchy_var])
tPosts = data.frame(hier_ids, ts, stringsAsFactors=FALSE)
tPosts
unique(hierarchy_data[,hierarchy_var])
as.character(unique(hierarchy_data[,hierarchy_var]))
hier_ids[unique(k)] = as.character(unique(hierarchy_data[,hierarchy_var]))
tPosts = data.frame(hier_ids, ts, stringsAsFactors=FALSE)
tPosts
colnames(movieReviewOutput)
colnames(humanRightsDocs)
head(humanRightsDocs)
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
setwd("~/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
build(current.code)
