expect_that(10, equals(10+1e-7))
expect_that(10, equals(10+1e-6))
test_that("str_length is number of characters", {
expect_that(str_length("a"), equals(1))
expect_that(str_length("ab"), equals(2))
expect_that(str_length("abc"), equals(3))
})
str_length("a")
library(plyr)
str_length("a")
??str_length
library(stringr)
test_that("str_length is number of characters", {
expect_that(str_length("a"), equals(1))
expect_that(str_length("ab"), equals(2))
expect_that(str_length("abc"), equals(3))
})
test_that("str_length is number of characters", {
expect_that(str_length("a"), equals(1))
expect_that(str_length("ab"), equals(2))
expect_that(str_length("abc"), equals(3))
expect_that(str_length("adbc"), equals(3))
})
test_that("str_length of missing is missing", {
expect_that(str_length(NA), equals(NA_integer_))
expect_that(str_length(c(NA, 1)), equals(c(NA, 1)))
expect_that(str_length("NA"), equals(2))
})
test_that("str_length of missing is missing", {
expect_that(str_length(NA), equals(NA_integer_))
expect_that(str_length(c(NA, 12)), equals(c(NA, 1)))
expect_that(str_length("NA"), equals(2))
})
test_that("str_length of missing is missing", {
expect_that(str_length(NA), equals(NA_integer_))
expect_that(str_length(c(NA, 12)), equals(c(NA, 1)))
expect_that(str_length("NA3"), equals(2))
})
expect_that(10, equals(10+1e-7))
expect_that(10, equals(10+1e-6))
context("String length")
test_that("str_length is number of characters", {
expect_that(str_length("a"), equals(1))
expect_that(str_length("ab"), equals(2))
expect_that(str_length("abc"), equals(3))
})
test_that("str_length of missing is missing", {
expect_that(str_length(NA), equals(NA_integer_))
expect_that(str_length(c(NA, 1)), equals(c(NA, 1)))
expect_that(str_length("NA"), equals(2))
})
test_that("str_length of factor is length of level", {
expect_that(str_length(factor("a")), equals(1))
expect_that(str_length(factor("ab")), equals(2))
expect_that(str_length(factor("abc")), equals(3))
})
context("String length")
test_that("str_length is number of characters", {
expect_that(str_length("a"), equals(1))
expect_that(str_length("ab"), equals(2))
expect_that(str_length("abc"), equals(3))
})
test_that("str_length of missing is missing", {
expect_that(str_length(NA), equals(NA_integer_))
expect_that(str_length(c(NA, 1)), equals(c(NA, 1)))
expect_that(str_length("NA"), equals(2))
})
test_that("str_length of factor is length of level", {
expect_that(str_length(factor("a")), equals(1))
expect_that(str_length(factor("ab")), equals(2))
expect_that(str_length(factor("abc4")), equals(3))
})
setup_test_dir(path='~/Dropbox/squaresPackFiles/squaresPack/')
library(testthat)
setup_test_dir(path='~/Dropbox/squaresPackFiles/squaresPack/')
testthat::setup_test_dir(path='~/Dropbox/squaresPackFiles/squaresPack/')
setup_test_dir(path='~/Dropbox/squaresPackFiles/squaresPack/')
library(testthat)
setup_test_dir(path='~/Dropbox/squaresPackFiles/squaresPack/')
library(testthat)
setup_test_dir(path='~/Dropbox/squaresPackFiles/squaresPack/')
?setup_test_dir
?source_test_helpers
?find_test_scripts
test_dir(path='~/Dropbox/squaresPackFiles/squaresPack/')
test_dir(path='~/Dropbox/squaresPackFiles/squaresPack/inst/tests/')
test_dir(path='~/Dropbox/squaresPackFiles/squaresPack/inst/tests/')
?auto_test
?auto_test_package
?"expect_warning"
expect_warning(addSquares('p'))
#' Finds the sum of squared numbers
#'
#' @param x A numeric object
#' @param y A numeric object with the same dimensionality as \code{x}.
#'
#' @return An object of class Squares containing
#'  \item{squares}{The sum of the squared values}
#'  \item{x}{The first object input}
#'  \item{y}{The second object input}
#' @author Jacob M. Montgomery
#' @note This is a very simple function
#' @examples
#'
#' myX <- c(20, 3)
#' myY <- c(-2, 4.1)
#' addSquares(myX, myY)
#' @seealso \code{\link{subtractSquares}}
#' @rdname addSquares
#' @aliases addSquares,ANY-method
#' @export
setGeneric(name="addSquares",
def=function(x, y, ...)
{standardGeneric("addSquares")}
)
#' @export
setMethod(f="addSquares",
definition=function(x, y, ...){
return(new("Squares", square=(x^2 + y^2), x = x, y = y))
}
)
expect_warning(addSquares('p'))
addSquares <- function(x,y) return (x^2+y^2)
expect_warning(addSquares('p'))
expect_error(addSquares('p'))
expect_error(addSquares(1,2))
addSquares(1,2)
addSquares('p')
expect_error(addSquares('p'))
expect_is(addSquares(1,2),'numeric')
expect_is(addSquares(1,2),'character')
library(rstan)
load("~/Dropbox/CATText/Movie Reviews/Fit20.Rdata")
head(summary(fit)$summary)
load('~/Dropbox/CATText/Movie Reviews/docInfo.Rdata')
cor(docInfo$alphas20,docInfo$alphasLast20)
load('~/Dropbox/CATText/Movie Reviews/docInfo.Rdata')
hold3 <- docInfo[docInfo$Stars==3,]
hold3 <- hold3[order(hold3$alphas40),]
head(hold3)
tail(hold3)
hold4 <- docInfo[docInfo$Stars==4,]
hold4 <- hold4[order(hold4$alphas40),]
head(hold4)
tail(hold4)
hold5 <- docInfo[docInfo$Stars==5,]
hold5 <- hold5[order(hold5$alphas40),]
head(hold3)
head(hold5)
head(hold4)
head(hold3)
hold1 <- docInfo[docInfo$Stars==1,]
hold1 <- hold1[order(hold1$alphas40),]
hold2 <- docInfo[docInfo$Stars==2,]
hold2 <- hold2[order(hold2$alphas40),]
hold3 <- docInfo[docInfo$Stars==3,]
hold3 <- hold3[order(hold3$alphas40),]
head(hold2)
head(hold3)
tail(hold3)
docInfo2 <- read.table('~/Dropbox/CATText/HR data/State_Dept_Torture_1999WithIds',  sep='\t', header=TRUE, quote='\"')
docInfo2 <- docInfo2[-1,]
load('~/Dropbox/CATText/HR data/all_batches.Rdata')
dups <- docInfo2[which(duplicated(docInfo2$ids)),'ids']
docInfo2$ids <- as.numeric(as.character(docInfo2$ids))
docInfo2[which(duplicated(docInfo2$ids)),'ids'] <- 9500:9546
#output[,'document_id']%in%dups
i<-1
mapper<-9500:9546
for(dup in dups){
reps <- which(output$document_id==dup)
for(rep in reps){
if(rep%%2!=0){
tobind <- output[rep:(rep+1),]
tobind[1,'document_id'] <- mapper[i]
}else{
tobind <- output[(rep-1):rep,]
tobind[2,'document_id'] <- mapper[i]
}
output <- rbind(output, tobind)
}
i<-i+1
}
docInfo2 <- docInfo2[order(docInfo2$ids),]
countries <- docInfo2$V1
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
load('~/Dropbox/CATText/HR data/docInfo2.Rdata')
model_code7 <- '
data {
int N; // number of comparisons
int M; // number of paragraphs
int D; // number of documents (countries)
int P; //Number of coders
int y[N]; // outcome
int g[N];    // id  map first item in comparison
int h[N];    // id map of second item in comparison
int j[N]; // id map for workers
int k[M]; // id map for documents (countries) relating to documents
}
parameters {
real a[M]; // paragraphs
real t[D]; // documents (countries)
real<lower=0> b[P];
real<lower=0> sigmac[D];
//real<lower=0> sigma;
}
model {
//sigma~normal(0,3);
//t ~ normal(0, 1);
for(p in 1:P){
b[p] ~ normal(0,1);
}
for(d in 1:D){
t[d] ~ normal(0,1);
sigmac[d] ~ normal(0,.5);
}
for(m in 1:M){
a[m] ~ normal(t[k[m]],sigmac[k[m]]);
}
for(n in 1:N) {
//a[g[n]] ~ normal(t[k[n]], sigmac[k[n]]);
//a[h[n]] ~ normal(t[q[n]], sigmac[q[n]]);
y[n] ~ bernoulli(inv_logit(b[j[n]]*(a[g[n]]-a[h[n]])));
}
}'
head(output)
unique(output$batch_id)
table(output$batch_id)
data <- output[output$batch_id%in%(178:185),]
33982/16608
y <- data$result[seq(1,dim(data)[1],by=2)]
#z <- y
#z[z==0] <- -1
data$document_id_old <- data$document_id
data$document_id <- as.numeric(as.factor(data$document_id))
#data$country_id_old <- data$countries
#data$country_id <- as.numeric(data$country_id_old)
g <- data$document_id[seq(1,dim(data)[1],by=2)]
h <- data$document_id[seq(1,dim(data)[1],by=2)+1]
countries <- as.numeric(as.factor(data$countries))
j <- as.numeric(data$worker_id[seq(1,dim(data)[1],by=2)])
#unique(data$worker_id[seq(1,dim(data)[1],by=2)])
M <- length(unique(c(g,h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(c(q,k)))
### need to recode ids ###
#hold.ids <- sort(unique(g))
#hold.ids.real <- g
#length(as.factor(g))
#g <- as.numeric(as.factor(g))
#h <- as.numeric(as.factor(h))
#k <- as.numeric(as.factor(k))
#q <- as.numeric(as.factor(q))
docInfo2$V1
View(docInfo2)
countries <- as.numeric(as.factor(as.character(docInfo2$country_iso3c)))
countries
k <- countries
fit1half <- stan(model_code=model_code7, data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=3, iter=2500, seed=1234, control=list(max_treedepth=50))
#, control=list(adapt_delta = 0.99, stepsize=.5))
save(fit1half, file="~/Dropbox/CATText/HR data/Fit1half.Rdata")
D
D <- length(unique(c(q,k)))
D
data <- output[output$batch_id%in%(178:185),]
#new dim 16608 compared to 33982, 33982/16608 = 2.05
y <- data$result[seq(1,dim(data)[1],by=2)]
#z <- y
#z[z==0] <- -1
data$document_id_old <- data$document_id
data$document_id <- as.numeric(as.factor(data$document_id))
#data$country_id_old <- data$countries
#data$country_id <- as.numeric(data$country_id_old)
g <- data$document_id[seq(1,dim(data)[1],by=2)]
h <- data$document_id[seq(1,dim(data)[1],by=2)+1]
countries <- as.numeric(as.factor(data$countries))
j <- as.numeric(data$worker_id[seq(1,dim(data)[1],by=2)])
#unique(data$worker_id[seq(1,dim(data)[1],by=2)])
M <- length(unique(c(g,h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(c(q,k)))
### need to recode ids ###
#hold.ids <- sort(unique(g))
#hold.ids.real <- g
#length(as.factor(g))
#g <- as.numeric(as.factor(g))
#h <- as.numeric(as.factor(h))
#k <- as.numeric(as.factor(k))
#q <- as.numeric(as.factor(q))
## get mapper
countries <- as.numeric(as.factor(as.character(docInfo2$country_iso3c)))
k <- countries
fit1half <- stan(model_code=model_code7, data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=3, iter=2500, seed=1234, control=list(max_treedepth=50))
#, control=list(adapt_delta = 0.99, stepsize=.5))
save(fit1half, file="~/Dropbox/CATText/HR data/Fit1half.Rdata")
data <- output[!output$batch_id%in%(178:185),]
y <- data$result[seq(1,dim(data)[1],by=2)]
#z <- y
#z[z==0] <- -1
data$document_id_old <- data$document_id
data$document_id <- as.numeric(as.factor(data$document_id))
#data$country_id_old <- data$countries
#data$country_id <- as.numeric(data$country_id_old)
g <- data$document_id[seq(1,dim(data)[1],by=2)]
h <- data$document_id[seq(1,dim(data)[1],by=2)+1]
countries <- as.numeric(as.factor(data$countries))
j <- as.numeric(data$worker_id[seq(1,dim(data)[1],by=2)])
#unique(data$worker_id[seq(1,dim(data)[1],by=2)])
M <- length(unique(c(g,h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(c(q,k)))
### need to recode ids ###
#hold.ids <- sort(unique(g))
#hold.ids.real <- g
#length(as.factor(g))
#g <- as.numeric(as.factor(g))
#h <- as.numeric(as.factor(h))
#k <- as.numeric(as.factor(k))
#q <- as.numeric(as.factor(q))
## get mapper
countries <- as.numeric(as.factor(as.character(docInfo2$country_iso3c)))
k <- countries
fit2half <- stan(model_code=model_code7, data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=3, iter=2500, seed=1234, control=list(max_treedepth=50))
#, control=list(adapt_delta = 0.99, stepsize=.5))
save(fit2half, file="~/Dropbox/CATText/HR data/Fit2half.Rdata")
y
D
M
j
length(unique(j))
data$worker_id[seq(1,dim(data)[1],by=2)]
length(unique(j))
j <- as.numeric(unclass(data$worker_id[seq(1,dim(data)[1],by=2)]))
length(unique(j))
j
j <- as.numeric(unclass(data$worker_id[seq(1,dim(data)[1],by=2)]))
#unique(data$worker_id[seq(1,dim(data)[1],by=2)])
M <- length(unique(c(g,h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(c(q,k)))
### need to recode ids ###
#hold.ids <- sort(unique(g))
#hold.ids.real <- g
#length(as.factor(g))
#g <- as.numeric(as.factor(g))
#h <- as.numeric(as.factor(h))
#k <- as.numeric(as.factor(k))
#q <- as.numeric(as.factor(q))
## get mapper
countries <- as.numeric(as.factor(as.character(docInfo2$country_iso3c)))
k <- countries
fit2half <- stan(model_code=model_code7, data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=3, iter=2500, seed=1234, control=list(max_treedepth=50))
#, control=list(adapt_delta = 0.99, stepsize=.5))
save(fit2half, file="~/Dropbox/CATText/HR data/Fit2half.Rdata")
g
h
N
M
P
table(j)
j <- as.numeric(as.factor(as.character(data$worker_id[seq(1,dim(data)[1],by=2)])))
table(j)
#unique(data$worker_id[seq(1,dim(data)[1],by=2)])
M <- length(unique(c(g,h)))
N <- length(y)
P <- length(unique(j))
D <- length(unique(c(q,k)))
### need to recode ids ###
#hold.ids <- sort(unique(g))
#hold.ids.real <- g
#length(as.factor(g))
#g <- as.numeric(as.factor(g))
#h <- as.numeric(as.factor(h))
#k <- as.numeric(as.factor(k))
#q <- as.numeric(as.factor(q))
## get mapper
countries <- as.numeric(as.factor(as.character(docInfo2$country_iso3c)))
k <- countries
fit2half <- stan(model_code=model_code7, data=c("y", "g", "h", "N", "M", "P", "j", "D", "k"),
chains=3, iter=2500, seed=1234, control=list(max_treedepth=50))
#, control=list(adapt_delta = 0.99, stepsize=.5))
save(fit2half, file="~/Dropbox/CATText/HR data/Fit2half.Rdata")
?grep
summary(fit1half)$summary[,'mean']
names(summary(fit1half)$summary[,'mean'])
grep('a',names(summary(fit1half)$summary[,'mean']))
cor(summary(fit1half)$summary[grep('a',names(summary(fit1half)$summary[,'mean'])),'mean'],
summary(fit2half)$summary[grep('a',names(summary(fit2half)$summary[,'mean'])),'mean'])
cor(summary(fit1half)$summary[grep('t',names(summary(fit1half)$summary[,'mean'])),'mean'],
summary(fit2half)$summary[grep('t',names(summary(fit2half)$summary[,'mean'])),'mean'])
plot(summary(fit1half)$summary[grep('t',names(summary(fit1half)$summary[,'mean'])),'mean'],
summary(fit2half)$summary[grep('t',names(summary(fit2half)$summary[,'mean'])),'mean'],
pch=19, col=col1, xlab="First 10", ylab="Last 10")
col1 <- rgb(0, 0, .8, alpha=.3)
col2 <- rgb(.8, 0, 0, alpha=.3)
plot(summary(fit1half)$summary[grep('t',names(summary(fit1half)$summary[,'mean'])),'mean'],
summary(fit2half)$summary[grep('t',names(summary(fit2half)$summary[,'mean'])),'mean'],
pch=19, col=col1, xlab="First 10", ylab="Last 10")
abline(lm(docInfo$alphasLast20~docInfo$alphas20), col='gray80')
abline(lm(summary(fit2half)$summary[grep('t',names(summary(fit2half)$summary[,'mean'])),'mean']~
summary(fit1half)$summary[grep('t',names(summary(fit1half)$summary[,'mean'])),'mean']), col='gray80')
pdf(width=6, height=4, file="~/Dropbox/CATText/Graphics/Color/HRRely.pdf")
par(mfrow=c(1,1), mgp=c(1,0,0), tcl=0, mar=c(2,2,1,1))
col1 <- rgb(0, 0, .8, alpha=.3)
#col2 <- rgb(.8, 0, 0, alpha=.3)
#cor(estimates2.2, estimates2.7)
plot(summary(fit1half)$summary[grep('t',names(summary(fit1half)$summary[,'mean'])),'mean'],
summary(fit2half)$summary[grep('t',names(summary(fit2half)$summary[,'mean'])),'mean'],
pch=19, col=col1, xlab="First 10", ylab="Last 10")
abline(lm(summary(fit2half)$summary[grep('t',names(summary(fit2half)$summary[,'mean'])),'mean']~
summary(fit1half)$summary[grep('t',names(summary(fit1half)$summary[,'mean'])),'mean']), col='gray80')
#plot(estimates2.2, estimates1, pch=19, col=col2,  xlab="Run 2 (First 20)", ylab="Run 1")
#abline(lm(estimates1~estimates2.2))
dev.off()
FFD<-read.csv('~/Dropbox/CATText/ImmigrationSurvey/FinalFinalData.csv')
cor(cbind(FFD$fear_ra1, FFD$fear_ra2, FFD$ra.means, FFD$Means, FFD$stanMeans, FFD$Topic2))
load(file='~/Dropbox/CATText/WiscAds2008/docInfo.Rdata')
colnames(docInfo)
docInfo$tone
hold5 <- docInfo[docInfo$tone == 5,]
hold5[min(hold5$alphas),]
hold5 <- hold5[!is.na(hold5$alphas),]
hold5[min(hold5$alphas),]
hold5[which.min(hold5$alphas),]
hold4 <- docInfo[docInfo$tone == 4,]
hold4 <- hold4[!is.na(hold4$alphas),]
hold4[which.max(hold4$alphas),]
docInfo$alphas==-.64
any(docInfo$alphas==-.64)
hold3 <- docInfo[docInfo$tone == 3,]
hold3 <- hold3[!is.na(hold3$alphas),]
hold3[which.max(hold3$alphas),]
hold2 <- docInfo[docInfo$tone == 2,]
hold2 <- hold2[!is.na(hold2$alphas),]
hold2[which.min(hold2$alphas),]
colnames(docInfo)
hold4[which.max(hold4$alphas),]
hold4[which.min(hold4$alphas),]
load(file='~/Dropbox/CATText/WiscAds2008/docInfo2.Rdata')
467*2
load(file='~/Dropbox/CATText/HR Data/docInfoWEst.Rdata')
load(file='~/Dropbox/CATText/HR data/docInfoWEst.Rdata')
docInfo[docInfo$country_iso3c=='BUR',]
docInfo[docInfo$country_iso3c=='COG',]
load('HR data/docs.Rdata')
load(file='~/Dropbox/CATText/HR data/doca.Rdata')
load(file='~/Dropbox/CATText/HR data/docs.Rdata')
docs[docInfo$country_iso3c=='COG',]
docs[docs$country_iso3c=='COG',]
docs[docs$ccode=='COG',]
head(docInfo)
docInfo[docInfo$country_iso3c=='COG',]
docInfo[docInfo$country_iso3c=='CUB',]
docInfo[docInfo$country_iso3c=='BDI',]
docInfo[docInfo$country_iso3c=='EST',]
docInfo[docInfo$country_iso3c=='CHN',]
docInfo[docInfo$country_iso3c=='TUN',]
docInfo[docInfo$country_iso3c=='GNQ',]
docInfo[docInfo$country_iso3c=='BIH',]
docInfo[docInfo$country_iso3c=='TJK',]
docInfo[docInfo$country_iso3c=='TKM',]
docs[docs$ccode=='TKM',]
docs[docs$ccode=='BIH',]
docs[docs$ccode=='GNQ',]
docs[docs$ccode=='TUN',]
docs[docs$ccode=='CHN',]
docs[docs$ccode=='BDI',]
docs[docs$ccode=='CUB',]
docs[docs$ccode=='COG',]
docs[docs$ccode=='EST',]
docs[docs$ccode=='BIH',]
docs[docs$ccode=='TKM',]
docs[docs$ccode=='TJK',]
docs[docs$ccode=='LBN',]
docs[docs$ccode=='CZE',]
(11/2)^2*pi
(11/2)^2*pi+(17/2)^2*pi
(13/2)^2*pi*2
15.95+8.95
13.45*2
library(sentimentIt)
?authenticate
?reviews
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
current.code <- as.package("sentimentIt")
load_all(current.code)
setwd("~/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
library(sentimentIt)
?sentimentIt
?sentimentIt-package
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
build(current.code)
