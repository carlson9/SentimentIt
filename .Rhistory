Regress<-cbind(Reg, Siml)
Regress<-abind(Reg, Siml)
library(abind)
Regress<-abind(Reg, Siml)
Regress<-abind(Y, Siml)
Regress<-abind(Siml, Y)
Reg<-lm(Y ~ Siml)
Reg<-lm(Y ~ Siml[1, ,])
?abind
Regress<-abind(Siml, 2, Y)
Regress<-abind(Siml, Y, along=2)
Regress<-abind(Siml, Y, along=1)
Regress<-abind(Siml, Y, along=3)
t(Y)
Regress<-abind(Siml, t(Y), along=2)
Regress[1,,]
Regress[,1,]
Regress[,,1]
dim(Regress)
Regress[,6,]
Regress.mod<-amply(.data=Regress, .variables=2, .fun=lm(Regress[,6,] ~ Regress[,1,]+Regress[,2,]+Regress[,3,]+Regress[,4,]+Regress[,5,]))
library(plyr)
Regress.mod<-amply(.data=Regress, .variables=2, .fun=lm(Regress[,6,] ~ Regress[,1,]+Regress[,2,]+Regress[,3,]+Regress[,4,]+Regress[,5,]))
Regress.mod<-aaply(.data=Regress, .variables=2, .fun=lm(Regress[,6,] ~ Regress[,1,]+Regress[,2,]+Regress[,3,]+Regress[,4,]+Regress[,5,]))
Regress.mod<-aaply(.data=Regress, .margins=2, .fun=lm(Regress[,6,] ~ Regress[,1,]+Regress[,2,]+Regress[,3,]+Regress[,4,]+Regress[,5,]))
Regress.mod<-lm(Regress[,6,] ~ Regress[,1,]+Regress[,2,]+Regress[,3,]+Regress[,4,]+Regress[,5,])
Regress.mod
rm(list=ls())
library(plyr)
Siml<-array(runif(20*5*1000), dim=c(20,5, 1000))
Siml[,,1]
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
X<-matrix(rnorm(100), ncol=5, nrow=20)
X[1,]
X%*%Beta
library(plyr)
Y<-aaply(Siml, 3, function(x) x%*%Beta+rnorm(20))
Y[1000,]
library(abind)
Regress<-abind(Siml, t(Y), along=2)
Regress[,,1000] #To check the dimension
dim(Regress) #To check the dimension
Coeff <- aaply(.data=Regress, .margins=3, .fun=function(y){
data <- as.data.frame(y)
model <- lm(V6 ~ V1 + V2 + V3 + V4 + V5, data=data)
matrix(model$coefficients)
})
plotdensity<-function(x){
plot(density(x))
}
par(mfrow=c(3,2), mar=c(1.9,2,2,0))
apply(Coeff, 2, plotdensity)
library('doMC')
library('foreach')
library(XML)
myURL <- 'http://www.cbssports.com/collegebasketball/scoreboard/div1/20170221'
rm(list=ls())
library(XML)
myURL <- 'http://www.cbssports.com/collegebasketball/scoreboard/div1/20170221'
allTables <- readHTMLTable(myURL)
allTables
str(allTables)  # Look at the allTables object to find the specific table we want
oneGame <- allTables[[1]]
oneGame
as.character(oneGame$V1)
as.numeric(as.character(oneGame$V5))
oneGame <- allTables[[4]]
oneGame
gameFinder<-function(x){
if(!is.data.frame(x)){return(NULL)}
if(dim(x)[2]==1){
return(NULL)}
if(dim(x)[1]==2){
output<-data.frame(team=x$V1, finalScore=x$V4)
return(output)
}
if(dim(x)[1]==3){
output<-data.frame(team=x$V1[2:3], finalScore=x$V5[2:3])
return(output)
}
if(dim(x)[1]>3){return("ERROR")}
}
uglyList<-lapply(allTables, gameFinder)
uglyList<- uglyList[!sapply(uglyList, is.null)]
uglyList
uglyList<-lapply(allTables, gameFinder)
uglyList
uglyList<- uglyList[!sapply(uglyList, is.null)]
scoreExtractor <- function(x){
if(is.null(x)){} else {
output<-list()
output$Home.Team<-as.character(x$team)[2]
output$Away.Team<-as.character(x$team)[1]
output$Home.Score<-as.numeric(as.character(x$finalScore))[2]
output$Away.Score<-as.numeric(as.character(x$finalScore))[1]
return(output)
}
}
scoreExtractor(uglyList[[2]])
library(plyr)
allScores<-laply(uglyList, scoreExtractor)
class(allScores)
allScores<-data.frame(matrix(unlist(allScores), ncol=4), stringsAsFactors = FALSE)
allScores
allScores<-data.frame(matrix(unlist(allScores), ncol=4), stringsAsFactors = FALSE)
colnames(allScores)<-c("Home.Team", "Away.Team", "Home.Score", "Away.Score")
allScores$Away.Score<-as.numeric(allScores$Away.Score)
allScores$Home.Score<-as.numeric(allScores$Home.Score)
allScores$Home.Score
plot(allScores$Home.Score, allScores$Away.Score)
dev.off
allScores$Home.Score
plot(allScores$Home.Score, allScores$Away.Score)
abline(a=0, b=1) # not much of a home team advantage here
dev.off()
allScores$Home.Score
plot(allScores$Home.Score, allScores$Away.Score)
abline(a=0, b=1) # not much of a home team advantage here
allScores$Home.Team <-  gsub('[0-9]+', '', allScores$Home.Team)
allScores$Home.Team
allScores$Home.Team <- gsub('-', '', allScores$Home.Team)
allScores$Home.Team <- gsub('\\)', '', allScores$Home.Team)
allScores$Home.Team <- gsub('\\(', '', allScores$Home.Team)
## Do the same for the away Time
allScores$Away.Team <-  gsub('[0-9]+', '', allScores$Away.Team)
allScores$Away.Team
allScores$Away.Team <- gsub('-', '', allScores$Away.Team)
allScores$Away.Team <- gsub('\\)', '', allScores$Away.Team)
allScores$Away.Team <- gsub('\\(', '', allScores$Away.Team)
allScores
oneDayScores <- function(myURL){
allTables <- readHTMLTable(myURL)
uglyList<-lapply(allTables, gameFinder)
uglyList<- uglyList[!sapply(uglyList, is.null)]
allScores<-laply(uglyList, scoreExtractor)
allScores<-data.frame(matrix(unlist(allScores), ncol=4), stringsAsFactors = FALSE)
colnames(allScores)<-c("Home.Team", "Away.Team", "Home.Score", "Away.Score")
allScores$Away.Score<-as.numeric(allScores$Away.Score)
allScores$Home.Score<-as.numeric(allScores$Home.Score)
allScores$Home.Team <-  gsub('[0-9]+', '', allScores$Home.Team)
allScores$Home.Team <- gsub('-', '', allScores$Home.Team)
allScores$Home.Team <- gsub('\\)', '', allScores$Home.Team)
allScores$Home.Team <- gsub('\\(', '', allScores$Home.Team)
allScores$Away.Team <-  gsub('[0-9]+', '', allScores$Away.Team)
allScores$Away.Team
allScores$Away.Team <- gsub('-', '', allScores$Away.Team)
allScores$Away.Team <- gsub('\\)', '', allScores$Away.Team)
allScores$Away.Team <- gsub('\\(', '', allScores$Away.Team)
return(allScores)
}
oneDayScores('http://www.cbssports.com/collegebasketball/scoreboard/div1/20170222')
base='http://www.cbssports.com/collegebasketball/scoreboard/div1/201702'
days<-paste0(base, c(paste0(0, 1:9), 10:24))
days
allDays <- oneDayScores(days[1])
for(i in days[2:length(days)]){
print(i)
allDays<-rbind(allDays, oneDayScores(i))
}
allDays
plot(allDays$Home.Score, allDays$Away.Score)
abline(a=0, b=1)
allTables
str(allTables)  # Look at the allTables object to find the specific table we want
oneGame <- allTables[[1]]
oneGame
as.character(oneGame$V1)
as.numeric(as.character(oneGame$V5))
oneGame <- allTables[[4]]
oneGame
gameFinder<-function(x){
if(!is.data.frame(x)){return(NULL)}
if(dim(x)[2]==1){
return(NULL)}
if(dim(x)[1]==2){
output<-data.frame(team=x$V1, finalScore=x$V4)
return(output)
}
if(dim(x)[1]==3){
if(dim(x)[2]==5){
output<-data.frame(team=x$V1[2:3], finalScore=x$V5[2:3])
return(output)
}
else (dim(x)[2]==6){
output<-data.frame(team=x$V1[2:3], finalScore=x$V6[2:3])
return(output)
}
}
if(dim(x)[1]>3){return("ERROR")}
}
gameFinder<-function(x){
if(!is.data.frame(x)){return(NULL)}
if(dim(x)[2]==1){
return(NULL)}
if(dim(x)[1]==2){
output<-data.frame(team=x$V1, finalScore=x$V4)
return(output)
}
if(dim(x)[1]==3){
if(dim(x)[2]==5){
output<-data.frame(team=x$V1[2:3], finalScore=x$V5[2:3])
return(output)
}
if (dim(x)[2]==6){
output<-data.frame(team=x$V1[2:3], finalScore=x$V6[2:3])
return(output)
}
}
if(dim(x)[1]>3){return("ERROR")}
}
myURL <- 'http://www.cbssports.com/collegebasketball/scoreboard/div1/20170202'
allTables <- readHTMLTable(myURL)
str(allTables)  # Look at the allTables object to find the specific table we want
oneGame <- allTables[[1]]
oneGame
gameFinder(myURL)
myURL <- 'http://www.cbssports.com/collegebasketball/scoreboard/div1/20170202'
myURL
gameFinder(allTables)
allTables <- readHTMLTable(myURL)
allTables
gameFinder(allTables)
gameFinder<-function(x){
if(!is.data.frame(x)){return(NULL)}
if(dim(x)[2]==1){
return(NULL)}
if(dim(x)[1]==2){
output<-data.frame(team=x$V1, finalScore=x$V4)
return(output)
}
if(dim(x)[1]==3){
if(dim(x)[2]==5){
output<-data.frame(team=x$V1[2:3], finalScore=x$V5[2:3])
return(output)
}
if (dim(x)[2]==6){
output<-data.frame(team=x$V1[2:3], finalScore=x$V6[2:3])
return(output)
}
}
}
gameFinder(allTables)
gameFinder(allTables[[4]])
ugly<-lapply(allTables, gameFinder)
ugly
ugly<- uglyList[!sapply(ugly, is.null)]
ugly
ugly<- ugly[!sapply(ugly, is.null)]
ugly<-lapply(allTables, gameFinder)
ugly<- ugly[!sapply(ugly, is.null)]
ugly
scoreExtractor(uglyList[[2]])
library(plyr)
allScores<-laply(uglyList, scoreExtractor)
class(allScores)
allScores<-data.frame(matrix(unlist(allScores), ncol=4), stringsAsFactors = FALSE)
colnames(allScores)<-c("Home.Team", "Away.Team", "Home.Score", "Away.Score")
allScores$Away.Score<-as.numeric(allScores$Away.Score)
allScores$Home.Score<-as.numeric(allScores$Home.Score)
allScores$Home.Score
plot(allScores$Home.Score, allScores$Away.Score)
abline(a=0, b=1)
allDays <- oneDayScores(days[1])
for(i in days[2:length(days)]){
print(i)
allDays<-rbind(allDays, oneDayScores(i))
}
allDays
plot(allDays$Home.Score, allDays$Away.Score)
abline(a=0, b=1)
library(sentimentIt)
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
setwd("/Users/luweiying/Desktop/Project")
data(reviews)
readText(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
read_documents_from = reviews,
write_documents_to = 'ReviewsWithIds.csv',
index = 'Review')
batch_ids <- createBatches(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
task_setting_id = 17,
num_batches = 3)
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[2])
library('doMC')
library('foreach')
library(plyr)
Siml<-array(runif(20*5*1000), dim=c(20,5, 1000))
Siml[,,1]
Beta <- matrix(c(1,2,0,4,0), ncol=1)
Beta
X<-matrix(rnorm(100), ncol=5, nrow=20)
X[1,]
Beta
X%*%Beta
library(plyr)
Y<-aaply(Siml, 3, function(x) x%*%Beta+rnorm(20))
Y[1000,]
library(abind)
Regress<-abind(Siml, t(Y), along=2)
Regress[,,1000] #To check the dimension
dim(Regress) #To check the dimension
Coeff <- aaply(.data=Regress, .margins=3, .fun=function(y){
data <- as.data.frame(y)
model <- lm(V6 ~ V1 + V2 + V3 + V4 + V5, data=data)
matrix(model$coefficients)
})
system.time(out <- aaply(.data=Regress, .margins=3, .fun=function(y){
data <- as.data.frame(y)
model <- lm(V6 ~ V1 + V2 + V3 + V4 + V5, data=data)
matrix(model$coefficients)
}))
registerDoMC(cores=32)
system.time(out2 <- aaply(.data=Regress, .margins=3, .fun=function(y){
data <- as.data.frame(y)
model <- lm(V6 ~ V1 + V2 + V3 + V4 + V5, data=data)
matrix(model$coefficients)
}, .parallel=TRUE))
registerDoMC(cores=2)
system.time(out2 <- aaply(.data=Regress, .margins=3, .fun=function(y){
data <- as.data.frame(y)
model <- lm(V6 ~ V1 + V2 + V3 + V4 + V5, data=data)
matrix(model$coefficients)
}, .parallel=TRUE))
registerDoMC(cores=1)
system.time(out2 <- aaply(.data=Regress, .margins=3, .fun=function(y){
data <- as.data.frame(y)
model <- lm(V6 ~ V1 + V2 + V3 + V4 + V5, data=data)
matrix(model$coefficients)
}, .parallel=TRUE))
registerDoMC(cores=3)
system.time(out2 <- aaply(.data=Regress, .margins=3, .fun=function(y){
data <- as.data.frame(y)
model <- lm(V6 ~ V1 + V2 + V3 + V4 + V5, data=data)
matrix(model$coefficients)
}, .parallel=TRUE))
registerDoMC(cores=4)
system.time(out2 <- aaply(.data=Regress, .margins=3, .fun=function(y){
data <- as.data.frame(y)
model <- lm(V6 ~ V1 + V2 + V3 + V4 + V5, data=data)
matrix(model$coefficients)
}, .parallel=TRUE))
registerDoMC(cores=16)
system.time(out2 <- aaply(.data=Regress, .margins=3, .fun=function(y){
data <- as.data.frame(y)
model <- lm(V6 ~ V1 + V2 + V3 + V4 + V5, data=data)
matrix(model$coefficients)
}, .parallel=TRUE))
batch_ids = c(292:294)
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[2])
createTasks(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batch_ids <- createBatches(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
task_setting_id = 17,
num_batches = 3)
docInfo <- read.table("/Users/luweiying/Desktop/Project/ReviewsWithIds.csv", header=TRUE)
makeCompsSep(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
ids = docInfo[,'ids'],
number_per = 10,
batch_id = batch_ids,
question = 'Below is text taken from two movie reviews. Please choose the text that you think comes from the most positive review',
pairwise_path = '/Users/luweiying/Desktop/Project/first10.Rdata')
createTasks(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
batchStatus(email = 'luwei.ying@wustl.edu',
password = 'Hello691223',
batch_id = batch_ids[1])
pf(0.95,2,17)
Prod <- log(c(39.32, 198.64, 175.47, 40.36, 17.66, 78.49, 48.04, 157.67, 11.29, 39.51, 23.23, 100.66, 31.52, 128.60, 169.41, 7.85, 62.44, 14.48, 37.85, 17.64))
Cap <- log(c(3.58, 18.23, 12.10, 15.13, 8.32, 19.90, 5.90, 17.60, 1.68, 12.57, 12.25, 17.19, 6.64, 13.57, 15.88, 4.78, 18.15, 18.56, 4.03, 18.85))
Lab <- log(c(39.07, 54.62, 34.08, 49.35, 48.96, 62.30, 44.00, 45.49, 68.26, 39.85, 41.73, 36.21, 59.94, 45.07, 41.55, 30.65, 31.54, 38.80, 68.64, 30.16))
Data_prod <- cbind(Prod, Cap, Lab)
model <- lm(Prod ~ Cap + Lab)
summary(model)
L<-matrix(c(0, 1, 1), ncol=3)
c <- c(1)
Ftest <- t((L %*% model$coefficients-c) %*% solve(L %*% vcov(model) %*% t(L)) %*% (L %*% model$coefficients-c))
pf(0.95,2,17)
Ftest <- t((L %*% model$coefficients-c) %*% solve(L %*% vcov(model) %*% t(L)) %*% (L %*% model$coefficients-c))
Ftest
summary(model)
model <- lm(log(Prod) ~ log(Cap) + log(Lab))
summary(model)
Prod <- c(39.32, 198.64, 175.47, 40.36, 17.66, 78.49, 48.04, 157.67, 11.29, 39.51, 23.23, 100.66, 31.52, 128.60, 169.41, 7.85, 62.44, 14.48, 37.85, 17.64)
Cap <- c(3.58, 18.23, 12.10, 15.13, 8.32, 19.90, 5.90, 17.60, 1.68, 12.57, 12.25, 17.19, 6.64, 13.57, 15.88, 4.78, 18.15, 18.56, 4.03, 18.85)
Lab <- c(39.07, 54.62, 34.08, 49.35, 48.96, 62.30, 44.00, 45.49, 68.26, 39.85, 41.73, 36.21, 59.94, 45.07, 41.55, 30.65, 31.54, 38.80, 68.64, 30.16)
Data_prod <- cbind(Prod, Cap, Lab)
model <- lm(log(Prod) ~ log(Cap) + log(Lab))
summary(model)
Prod <- c(39.32, 198.64, 175.47, 40.36, 17.66, 78.49, 48.04, 157.67, 11.29, 39.51, 23.23, 100.66, 31.52, 128.60, 169.41, 7.85, 62.44, 14.48, 37.85, 17.64)
Cap <- c(3.58, 18.23, 12.10, 15.13, 8.32, 19.90, 5.90, 17.60, 1.68, 12.57, 12.25, 17.19, 6.64, 13.57, 15.88, 4.78, 18.15, 18.56, 4.03, 18.85)
Lab <- c(39.07, 54.62, 34.08, 49.35, 48.96, 62.30, 44.00, 45.49, 68.26, 39.85, 41.73, 36.21, 59.94, 45.07, 41.55, 30.65, 31.54, 38.80, 68.64, 30.16)
Data_prod <- cbind(Prod, Cap, Lab)
model <- lm(log(Prod) ~ log(Cap) + log(Lab))
summary(model)
1-pf(Ftest,1,17)
Prod <- c(39.32, 198.64, 175.47, 40.36, 17.66, 78.49, 48.04, 157.67, 11.29, 39.51, 23.23, 100.66, 31.52, 128.60, 169.41, 37.85, 62.44, 14.48, 37.85, 17.64)
Cap <- c(3.58, 18.23, 12.10, 15.13, 8.32, 19.90, 5.90, 17.60, 1.68, 12.57, 12.25, 17.19, 6.64, 13.57, 15.88, 4.78, 18.15, 18.56, 4.03, 18.85)
Lab <- c(39.07, 54.62, 34.08, 49.35, 48.96, 62.30, 44.00, 45.49, 68.26, 39.85, 41.73, 36.21, 59.94, 45.07, 41.55, 30.65, 31.54, 38.80, 68.64, 30.16)
model <- lm(log(Prod) ~ log(Cap) + log(Lab))
summary(model)
L<-matrix(c(0, 1, 1), ncol=3)
c <- c(1)
Ftest <- t((L %*% model$coefficients-c) %*% solve(L %*% vcov(model) %*% t(L)) %*% (L %*% model$coefficients-c))
F_statistic <- t((L %*% model$coefficients-c) %*% solve(L %*% vcov(model) %*% t(L)) %*% (L %*% model$coefficients-c))
1-pf(F_statistic,1,17)
F_statistic <- t((L %*% model$coefficients-c) %*% solve(L %*% vcov(model) %*% t(L)) %*% (L %*% model$coefficients-c))
1-pf(F_statistic,1,17)
F_statistic <- (L %*% model$coefficients-c) %*% solve(L %*% vcov(model) %*% t(L)) %*% (L %*% model$coefficients-c)
1-pf(F_statistic,1,17)
F_statistic <- (L %*% model$coefficients-c) %*% solve(L %*% vcov(model) %*% t(L))
%*% (L %*% model$coefficients-c)
F_statistic <- (L %*% model$coefficients-c) %*% solve(
L %*% vcov(model) %*% t(L)) %*% (L %*% model$coefficients-c)
1-pf(F_statistic,1,17)
anova(Full_model, Reduced_model)
library(faraway)
data("prostate")
Full_model <- lm(lpsa ~ lcavol + lweight + svi+ lbph + age + lcp
+ gleason + pgg45, prostate)
Reduced_model <- lm(lpsa ~ lcavol + lweight + svi+ lbph + age, prostate)
anova(Full_model, Reduced_model)
library(car)
confidenceEllipse(Base_model, L=c("lcp", "pgg45"), levels=0.95,
center.pch=20, center.cex=1, col="gray60",
main="Joint Confidence Region")
abline(v=0)
abline(h=0)
library(car)
confidenceEllipse(Full_model, L=c("lcp", "pgg45"), levels=0.95,
center.pch=20, center.cex=1, col="gray60",
main="Joint Confidence Region")
abline(v=0)
abline(h=0)
linearHypothesis(Base_model, "2*lweight=svi")
linearHypothesis(Full_model, "2*lweight=svi")
model2 <- lm(lpsa ~ lcavol + I(lweight + 2*svi)+ lbph + age + lcp + gleason + pgg45, prostate)
summary(model2)
library(stargazer)
stargazer(model2)
summary(model2)$fstatistic
1 - pf(summary(model2)$fstatistic[1], summary(model2)$fstatistic[2], summary(model2)$fstatistic[3])
1 - pf(F_model2[1], F_model2[2], F_model2[3])
F_model2 <- summary(model2)$fstatistic
1 - pf(F_model2[1], F_model2[2], F_model2[3])
pf(F_model2[1], F_model2[2], F_model2[3])
pf(F_model2[1], F_model2[2], F_model2[3], lower=FALSE)
1-pf(F_model2[1], F_model2[2], F_model2[3], lower=FALSE)
linearHypothesis(Full_model, "2*lweight=svi")
model2 <- lm(lpsa ~ lcavol + I(2*lweight + svi)+ lbph + age + lcp + gleason + pgg45, prostate)
F_model2 <- summary(model2)$fstatistic
pf(F_model2[1], F_model2[2], F_model2[3], lower=FALSE)
1-pf(F_model2[1], F_model2[2], F_model2[3], lower=FALSE)
model2 <- lm(lpsa ~ lcavol + I(2*lweight + svi)+ lbph + age + lcp + gleason + pgg45, prostate)
F_model2 <- summary(model2)$fstatistic
1-pf(F_model2[1], F_model2[2], F_model2[3], lower=FALSE)
1-pf(F_model2[1], F_model2[2], F_model2[3])
summary(model2)
batchStatus(email = 'luwei.ying@wustl.edu', password = 'qualtrics2017!', batch_id = 317)
library(sentimentIt)
batchStatus(email = 'luwei.ying@wustl.edu', password = 'qualtrics2017!', batch_id = 317)
batchStatus(email = 'luwei.ying@wustl.edu', password = 'qualtrics2017!', batch_id = 316)
batchStatus(email = 'luwei.ying@wustl.edu', password = 'qualtrics2017!', batch_id = 336)
current.code <- as.package("sentimentIt")
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
current.code <- as.package("sentimentIt")
getwd()
setwd("/Users/luweiying/Desktop/Jacob/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
check(current.code)
createCert(email = 'luwei.ying@wustl.edu', password = 'qualtrics2017!', cert = 'stm', workers = "A3CP75BMIH4ACD")
