require(httr)
require(jsonlite)
require(RCurl)
length_batch <- length(batchNumber)
# try_count will count how many times function tries to connect to server
# Will try five times before giving up
try_count <- 0
#https://sentimentit.com/api/batches/1/download.json
while(try_count <= 5){
# TODO: Currently code resets output matrix each try. I am unsure if it should
# keep batch numbers which work successfully.
output_matrix <- NULL
for (i in 1:length_batch){
output<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batchNumber[i],'/download.json'))
myurl <- rawToChar(as.raw(output$content))
myurl <- strsplit(myurl,'\"')[[1]][4]
x <- getURL(myurl)
data <- read.csv(text = x)
output_matrix <- cbind(output_matrix, data)
}
# check if output is correct. If not function tries again.
if(nrow(output_matrix[1,]) > 1 & ncol(output_matrix) == length_batch ) {
try_count <- 6
} else {
print("Can not connect to server. Will try again in two minutes.")
try_count <- try_count + 1
Sys.sleep(120)
}
}
if(nrow(output_matrix[1,]) < 1 | ncol(output_matrix) != length_batch){
return("Could not connect to server now. Please check your batch numbers are accurate and try again later.")
}
batch_names <- paste("batch ", batchNumber)
colnames(output_matrix) <- batch_names
return(output_matrix)
}
readInData(204)
library(Rcpp)
rm(list=ls())
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add
## Note that I have to declare the "type" for the output, the inputs, and local variables
add(1,2,3)
add
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add(1,2,3)
add(2.1, 2.4, 5.2)
addR<-function(x, y, z){
return(x+y+z)
}
addR
addR(1,2,3)
addR(2.1, 2.4, 5.2)
addR(c(2.1, 2.2), c(1.9, 1.8), c(5, 5))
library(microbenchmark)
stupidSum<-function(x){
output<-NULL
for(i in 1:length(x)){
output<-output+x[i]
}
return(output)
}
stupidSum(runif(10000000))
cppFunction('double stupidSumCpp(NumericVector x) {
int n = x.size();
double total=0;
for(int i=0; i<n; ++i) {
total += x[i];
}
return total;
}')
test_dir("/tests")
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
test_dir("/tests")
setwd("/Users/davidflast/Documents/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
test_dir("/tests")
?test_dir
test_dir("~/tests")
test_dir("~/tests")
setwd("/Users/davidflast/Documents/SentimentIt")
test_dir("~tests")
test_dir("/tests")
test_dir("/Users/davidflast/Documents/SentimentIt/tests")
test_dir("/Users/davidflast/Documents/SentimentIt/tests")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
test_dir("/Users/davidflast/Documents/sentimentIt/tests")
?is.integer()
is.integer(1)
is.integer(1l)
is.integer(1L)
create_hits <- function(hit_setting=NULL, ids=NULL, batch_id){
require(httr)
require(jsonlite)
option_one <- is.null(hit_setting) | is.null(ids)
if(option_one) {
args <- paste('batch_id=', batch_id, sep='')
} else {
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
hit <- curl -X GET -d args https://sentimentit.com/api/comparisons/create_hits
return(hit)
}
create_hits <- function(hit_setting=NULL, ids=NULL, batch_id){
require(httr)
require(jsonlite)
option_one <- is.null(hit_setting) | is.null(ids)
if(option_one) {
args <- paste('batch_id=', batch_id, sep='')
} else {
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
hit <- curl -X GET -d args https://sentimentit.com/api/comparisons/create_hits
return(hit)
}
create_hits <- function(hit_setting=NULL, ids=NULL, batch_id){
require(httr)
require(jsonlite)
option_one <- is.null(hit_setting) | is.null(ids)
if(option_one) {
args <- paste('batch_id=', batch_id, sep='')
} else {
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
hit <- curl -X GET -d args https://sentimentit.com/api/comparisons/create_hits
return(hit)
}
create_hits <- function(hit_setting=NULL, ids=NULL, batch_id){
require(httr)
require(jsonlite)
option_one <- is.null(hit_setting) | is.null(ids)
if(option_one) {
args <- paste('batch_id=', batch_id, sep='')
} else {
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
hit <- curl -X GET -d args https://sentimentit.com/api/comparisons/create_hits
return(hit)
}
create_hits <- function(hit_setting=NULL, ids=NULL, batch_id) {
require(httr)
require(jsonlite)
option_one <- is.null(hit_setting) | is.null(ids)
if(option_one) {
args <- paste('batch_id=', batch_id, sep='')
}else{
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
hit <- curl -X GET -d args https://sentimentit.com/api/comparisons/create_hits
return(hit)
}
create_hits <- function(hit_setting=NULL, ids=NULL, batch_id) {
require(httr)
require(jsonlite)
option_one <- is.null(hit_setting) | is.null(ids)
if(option_one) {
args <- paste('batch_id=', batch_id, sep='')
}else{
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
hit <- curl -X GET -d args https://sentimentit.com/api/comparisons/create_hits
return(hit)
}
create_hits <- function(hit_setting=NULL, ids=NULL, batch_id) {
require(httr)
require(jsonlite)
option_one <- is.null(hit_setting) | is.null(ids)
if(option_one) {
args <- paste('batch_id=', batch_id, sep='')
}else{
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
hit <- curl -X GET -d args https://sentimentit.com/api/comparisons/create_hits
return(hit)
}
createHits <- function(hit_setting=NULL, ids=NULL, batch_id) {
require(httr)
require(jsonlite)
option_one <- is.null(hit_setting) | is.null(ids)
if(option_one) {
args <- paste('batch_id=', batch_id, sep='')
}else{
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
hit <- curl -X GET -d args https://sentimentit.com/api/comparisons/create_hits
return(hit)
}
?GET
batch_status <- function(batch_id){
status <- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',i,'/status.json'))
return(status)
}
batch_status(204)
batch_status <- function(batch_id){
status <- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
return(status)
}
batch_status(204)
batch_status <- function(batch_id){
require(jsonlite)
status <- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
return(status)
}
batch_status(204)
batch_status(205)
batch_status(2)
batch_status <- function(batch_id){
require(jsonlite)
status <- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
hold <- as.data.frame(read.csv(text = status), stringsAsFactors = FALSE)
return(hold)
}
batch_status(2)
batch_status <- function(batch_id){
require(jsonlite)
status <- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
hold <- as.data.frame(read(text = status), stringsAsFactors = FALSE)
return(hold)
}
batch_status(2)
batch_status <- function(batch_id){
require(jsonlite)
status <- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
hold <- as.data.frame(read.table(text = status), stringsAsFactors = FALSE)
return(hold)
}
batch_status(2)
batch_status <- function(batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
status <- read.table(text = x)
}
batch_status(204)
batch_status <- function(batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
status <- read.table(text = myurl)
}
batch_status(204)
batch_status <- function(batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
status <- read.table(file = myurl)
}
batch_status(204)
batch_status <- function(batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
#status <- read.table(file = myurl)
return(myurl)
}
batch_status(204)
?jsonlite
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/download.json'))
out <- fromJSON(rawToChar(as.raw(myurl$content)))
return(out)
}
batch_status(204)
?jsonlite
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
out <- fromJSON(rawToChar(as.raw(myurl$content)))
return(myurl)
}
batch_status(204)
?jsonlite
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
out <- fromJSON(rawToChar(as.raw(myurl$content)))
return(out)
}
batch_status(204)
x <-batch_status(204)
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
colnames(status) <- c("id", "comparisons" )
return(status)
}
x <-batch_status(204)
x
batch_status <- function(batch_id){
require(jsonlite)
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
colnames(status) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
return(status)
}
x <-batch_status(204)
x
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
return(output)
}
x <-batch_status(204:205)
x
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',i,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
return(output)
}
x <-batch_status(204:205)
x
toString(204:205)
toString(204:207)
strsplit(x=toString(204:207),split=",")
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',i,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
rownames(output) <- strsplit(x=toString(batch_id),split=",")
return(output)
}
x <-batch_status(204:205)
x
paste("batch_id:",strsplit(x=toString(204:207),split=","))
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',i,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
#rownames(output) <- strsplit(x=toString(batch_id),split=",")
return(output)
}
x <-batch_status(204:205)
x
batch_status <- function(batch_id){
require(jsonlite)
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://sentimentit.herokuapp.com/api/batches/',i,'/status.json'))
data <- fromJSON(rawToChar(as.raw(myurl$content)))
status <- data.frame(data$id, data$comparisons)
output <- rbind(output, status)
}
colnames(output) <- c("id", "total_count", "submitted_count", "completed_count", "expired_count" )
return(output)
}
x <-batch_status(204:205)
x
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
?GET
setwd("/Users/davidflast/Documents/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batch_status
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
setwd("/Users/davidflast/Documents/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batchStatus
setwd("/Users/davidflast/Documents/SentimentIt")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batchStatus
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
setwd("/Users/davidflast/Documents")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batchStatus
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?batchStatus
?readInData
?PUT
repostExpired <- function(batch_id){
require(jsonlite)
x <-PUT('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/repost_expired.json')
return(x)
}
repost_expired(2)
repostExpired <- function(batch_id){
require(jsonlite)
x <-PUT('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/repost_expired.json')
return(x)
}
repost_expired(2)
repostExpired(2)
repostExpired <- function(batch_id){
require(jsonlite)
PUT('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/repost_expired.json')
x <- GET('https://sentimentit.herokuapp.com/api/batches/',batch_id,'/repost_expired.json')
return(x)
}
repostExpired(2)
library(devtools)
library(roxygen2)
library(jsonlite)
library(httr)
library(plyr)
library(testthat)
# Davidflasterstein path
setwd("/Users/davidflast/Documents")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
test_dir("/tests")
test_dir("~tests")
test_dir("~/tests")
test_dir("~/tests/testthat")
test_dir("/tests/testthat")
test_dir(path="tests")
test_dir(path="tests/testthat")
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
current.code <- as.package("sentimentIt")
load_all(current.code)
document(current.code)
?in
?included
x <- 1:10
y <- 9:20
x %in% y
any(x %in% y)
?any
Sys.time()
as.numeric(format(Sys.time(), "%H"))
createHITS <- function(ids=NULL, HITsetting=NULL, batch_id){
require(httr)
require(jsonlite)
if(!is.numeric(ids) | !is.numeric(HITsetting) | !is.numeric(batch_id)){
stop("All arguments need to be numeric.")
}
if(is.null(ids)){
args <- paste('batch_id=', batch_id,"" ,sep='')
}else{
args <- paste('hit_setting=', HITsetting, '&ids=', paste(ids,collapse=','), sep='')
}
myget <- GET(paste('http://sentimentit.herokuapp.com/api/comparisons/create_hits?',
args, sep=''))
mytry <- try(out<-fromJSON(rawToChar(as.raw(myget$content))))
if(class(mytry) == "try-error"){
out <- 'error'
}
return(out)
}
