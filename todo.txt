Taishi -
    - you have a stand alone folder - integrate your functions into the main R folder
    - document your functions, create unit tests for each function
    - the functions I want:
        - fit_stan: take in a csv od batch numbers and fit the data, return a stan fit object
            - if the input is a vector of batches grab the data using the readInData function
        - check_workers: take in a stan fit and return workers that are low outliers and have answered more than 100
            - take an argument plot that is defaulted to FALSE but if set to TRUE will create a histogram with a rug plot
            - take an optional argument file that will save the histogram to the path and file name specified
        - fit_stan_heir: same as fit_stan but heirarchical
        - stanWrapper: create a function that will call either fit_stan or fit_stan_heir and will call check_workers
            - it should return a fit object if an argument returnFit is TRUE, workers that are outliers, optionally plot the histogram, optionally save the histogram
    - all of this should be done by next Thursday -- we can discuss further steps then

Others -
    - document all functions created and create minimal tests (when appropriate -- just don't create tests that will charge us)
    1st (done by next Thursday):

Joe
- create a function to certify workers
- create a function to revoke certifications
        - the return should be a boolean, indicating success or failure
- create a function that will take two certifications as arguments and a vector of worker IDs
	 -- the function will remove workers from the first certification and add 		them to the second
	 - this should utilize the other two functions
	 - the idea is we will use this to revoke certifications and add them to the 		banned list
- write a function that will check certifications of a worker (check the documentation)
      - this will for now be a stand alone function
	-- I do not yet see the utility to overall workflow

David
- create a function that will create a new batch with a HIT setting (documentation) 	-- the return should be the batch ID number
- create a function that check the status of a batch
       - should return all of the information of the curl return, but in list or
	vector format
 - create a function that will repost expired HITs from a batch
	-- return should be number of reposts


    2nd: once the above is done, we will need to write several wrapper functions that can run through the entire workflow -- this will need to have several lower level wrappers so that the user can choose which level of automation they want. we will also want to create some more lower level automated functions. this will include putting the timed function into the package after ensuring it would work with some trivial functionality, and we will also want to create a very similar function (possibly using a lower level function that the timed one could also use) that uses batch status instead of time. These functions will also need to use Taishi's functions so it can ban workers automatically. We will discuss details once the first assignment is done.
  2nd: 
## work flow:
# make batches on GUI
# create comparisons with vector of batches using 
#   makeComps_sep(ids, number_per, batches, question, 
#    per_batch=1000, path=NULL, name=NULL)
# if above step is put into wrapper function need to add
#    Sys.sleep(10 minutes default but make arg) to make sure they get up
# make HITs using createHITStimed(batches, time_per, mintime, maxtime)
# check workers every time batch is in arg checkWorkersAt
# ban and certify workers that are deviant argument of two cert names
# after it is completed, repost all batches
###
# another wrapper that checks status of batches and reposts when <5 are not done
David
document createHITStimed and readText
Taishi
batchesWrapper and timedWrapper

David 
!batchstatus
batchesWrapper (unsure about readText ids, and num_batches)
!createBatches
!createHITS
createHITSTimed
!makeCompsSep (unsure how to test)
!readInData
!repostExpired
!movieReviewData
#read text within workflow

Taishi
timedWrapper
checkWorkers
createPairwise
fitStan
fitStanHier
StanWrapper

Joe
SentimentIt
checkCert
createCert
createHITSbatch
giveTakeCert
readText
revokeCert



